/*
 * (c) Kitodo. Key to digital objects e. V. <contact@kitodo.org>
 *
 * This file is part of the Kitodo project.
 *
 * It is licensed under GNU General Public License version 3 or later.
 *
 * For the full copyright and license information, please read the
 * GPL3-License.txt file that was distributed with this source code.
 */

package org.kitodo.production.process;

import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.StringTokenizer;

import org.apache.commons.lang.StringUtils;
import org.kitodo.exceptions.ProcessGenerationException;
import org.kitodo.production.forms.createprocess.AdditionalDetailsTab;
import org.kitodo.production.forms.createprocess.AdditionalDetailsTableRow;

public class TitleGenerator extends Generator {

    private static final String TITLE_DOC_MAIN = "TitleDocMain";

    /**
     * Constructor for TitleGenerator.
     *
     * @param atstsl                     field used for title generation
     * @param additionalDetailsTableRows fields used for title generation
     */
    public TitleGenerator(String atstsl, List<AdditionalDetailsTableRow> additionalDetailsTableRows) {
        super(atstsl, additionalDetailsTableRows);
    }

    /**
     * Generate title for process.
     *
     * @param titleDefinition definition for title to generation
     * @param genericFields   Map of Strings
     * @return String
     */
    public String generateTitle(String titleDefinition, Map<String, String> genericFields)
            throws ProcessGenerationException {
        String currentAuthors = AdditionalDetailsTab.getListOfCreators(this.additionalDetailsTableRows);
        String currentTitle = getCurrentValue(TITLE_DOC_MAIN);

        StringBuilder newTitle = new StringBuilder();

        StringTokenizer tokenizer = new StringTokenizer(titleDefinition, "+");
        // parse the band title
        while (tokenizer.hasMoreTokens()) {
            String token = tokenizer.nextToken();
            // if the string begins with ' and ends with ' then take over the content
            if (token.startsWith("'") && token.endsWith("'")) {
                newTitle.append(token, 1, token.length() - 1);
            } else if (token.startsWith("#")) {
                // resolve strings beginning with # from generic fields
                if (Objects.nonNull(genericFields)) {
                    String genericValue = genericFields.get(token);
                    if (Objects.nonNull(genericValue)) {
                        newTitle.append(genericValue);
                    }
                }
            } else {
                newTitle.append(evaluateAdditionalDetailsRows(currentTitle, currentAuthors, token));
            }
        }

        if (newTitle.toString().endsWith("_")) {
            newTitle.setLength(newTitle.length() - 1);
        }
        // remove non-ascii characters for the sake of TIFF header limits
        return newTitle.toString().replaceAll("[^\\p{ASCII}]", "");
    }

    /**
     * Create Atstsl.
     *
     * @param title
     *            String
     * @param author
     *            String
     * @return String
     */
    public static String createAtstsl(String title, String author) {
        StringBuilder result = new StringBuilder(8);
        if (Objects.nonNull(author) && !author.trim().isEmpty()) {
            result.append(getPartString(author, 4));
            result.append(getPartString(title, 4));
        } else {
            StringTokenizer titleWords = new StringTokenizer(title);
            int wordNo = 1;
            while (titleWords.hasMoreTokens() && wordNo < 5) {
                String word = titleWords.nextToken();
                switch (wordNo) {
                    case 1:
                        result.append(getPartString(word, 4));
                        break;
                    case 2:
                    case 3:
                        result.append(getPartString(word, 2));
                        break;
                    case 4:
                        result.append(getPartString(word, 1));
                        break;
                    default:
                        break;
                }
                wordNo++;
            }
        }
        return result.toString().replaceAll("[\\W]", ""); // delete umlauts etc.
    }

    private String getCurrentValue(String metadataTag) {
        //int counter = 0;
        for (AdditionalDetailsTableRow row : this.additionalDetailsTableRows) {
            // TODO: check how to set "autogenerated" flag for metadata in ruleset!
            /* if (row.isAutogenerated() && metadataValue.isEmpty()) {
                //row.setValue(String.valueOf(System.currentTimeMillis() + counter));
                AdditionalDetailsTab.setAdditionalDetailsRow(row,
                        String.valueOf(System.currentTimeMillis() + counter));
                counter++;
            }*/
            String metadata = row.getMetadataID();
            if (Objects.nonNull(metadata) && metadata.equals(metadataTag)) {
                return AdditionalDetailsTab.getMetadataValue(row);
            }
        }
        return "";
    }

    private String evaluateAdditionalDetailsRows(String currentTitle, String currentAuthors, String token)
            throws ProcessGenerationException {
        StringBuilder newTitle = new StringBuilder();
        for (AdditionalDetailsTableRow row : this.additionalDetailsTableRows) {
            String rowMetadataID = row.getMetadataID();
            String rowValue = AdditionalDetailsTab.getMetadataValue(row);
            /*
             * if it is the ATS or TSL field, then use the calculated atstsl if it does not
             * already exist
             */
            if ("TSL_ATS".equals(rowMetadataID)) {
                if (StringUtils.isEmpty(this.atstsl)) {
                    this.atstsl = createAtstsl(currentTitle, currentAuthors);
                }
                AdditionalDetailsTab.setAdditionalDetailsRow(row, this.atstsl);
                rowValue = this.atstsl;
            }
            // add the content to the title
            if (rowMetadataID.equals(token) && Objects.nonNull(rowValue)) {
                newTitle.append(calculateProcessTitleCheck(rowMetadataID, rowValue));
            }
        }
        return newTitle.toString();
    }

    private static String getPartString(String word, int length) {
        return word.length() > length ? word.substring(0, length) : word;
    }
}
