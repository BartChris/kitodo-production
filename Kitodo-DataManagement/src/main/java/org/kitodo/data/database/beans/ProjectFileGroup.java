/*
 * (c) Kitodo. Key to digital objects e. V. <contact@kitodo.org>
 *
 * This file is part of the Kitodo project.
 *
 * It is licensed under GNU General Public License version 3 or later.
 *
 * For the full copyright and license information, please read the
 * GPL3-License.txt file that was distributed with this source code.
 */

package org.kitodo.data.database.beans;

import java.util.Objects;
import java.util.Optional;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EnumType;
import javax.persistence.Enumerated;
import javax.persistence.ForeignKey;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;

import org.kitodo.api.imagemanagement.ImageManagementInterface;

@Entity
@Table(name = "projectFileGroup")
public class ProjectFileGroup extends BaseBean {
    private static final long serialVersionUID = -5506252462891480484L;

    @Column(name = "fileGroup")
    private String fileGroup;

    @Column(name = "urlStructure")
    private String urlStructure;

    @Column(name = "mimeType")
    private String mimeType;

    @Column(name = "path")
    private String path;

    @ManyToOne
    @JoinColumn(name = "project_id", foreignKey = @ForeignKey(name = "FK_projectFileGroup_project_id"))
    private Project project;

    /**
     * Whether the folder is copied during export.
     */
    @Column(name = "copyFolder")
    private boolean copyFolder;

    /**
     * Whether the folder is created empty, when a new process is created.
     */
    @Column(name = "createFolder")
    private boolean createFolder;

    /**
     * If not null, images in this folder can be generated by the function
     * {@link ImageManagementInterface#createDerivative(java.net.URI, double, java.net.URI, org.kitodo.api.imagemanagement.ImageFileFormat)}.
     * The value is the percentage of scaling for the derivative.
     */
    @Column(name = "derivative")
    private Double derivative;

    /**
     * If not null, images in this folder can be generated by the function
     * {@link ImageManagementInterface#changeDpi(java.net.URI, int)}. The value
     * is the new DPI for the images.
     */
    @Column(name = "dpi")
    private Integer dpi;

    /**
     * If not null, images in this folder can be generated by the function
     * {@link ImageManagementInterface#getScaledWebImage(java.net.URI, double)}.
     * The value is the percentage of scaling for the derivative.
     */
    @Column(name = "imageScale")
    private Double imageScale;

    /**
     * If not null, images in this folder can be generated by the function
     * {@link ImageManagementInterface#getSizedWebImage(java.net.URI, int)}. The
     * value is the new the new width in pixels.
     */
    @Column(name = "imageSize")
    private Integer imageSize;

    @Column(name = "linkingMode")
    @Enumerated(EnumType.STRING)
    private LinkingMode linkingMode;

    public String getName() {
        return this.fileGroup;
    }

    public void setName(String name) {
        this.fileGroup = name;
    }

    public Project getProject() {
        return this.project;
    }

    public void setProject(Project project) {
        this.project = project;
    }

    public String getPath() {
        return this.urlStructure;
    }

    public void setPath(String path) {
        this.urlStructure = path;
    }

    public String getMimeType() {
        return this.mimeType;
    }

    public void setMimeType(String mimeType) {
        this.mimeType = mimeType;
    }

    public String getFolder() {
        return this.path;
    }

    public void setFolder(String folder) {
        this.path = folder;
    }

    public boolean isCopyFolder() {
        return copyFolder;
    }

    public void setCopyFolder(boolean copyFolder) {
        this.copyFolder = copyFolder;
    }

    public boolean isCreateFolder() {
        return createFolder;
    }

    public void setCreateFolder(boolean createFolder) {
        this.createFolder = createFolder;
    }

    public Optional<Double> getDerivative() {
        return Optional.ofNullable(derivative);
    }

    public void setDerivative(Double derivative) {
        this.derivative = derivative;
    }

    public Optional<Integer> getDpi() {
        return Optional.ofNullable(dpi);
    }

    public void setDpi(Integer dpi) {
        this.dpi = dpi;
    }

    public Optional<Double> getImageScale() {
        return Optional.ofNullable(imageScale);
    }

    public void setImageScale(Double imageScale) {
        this.imageScale = imageScale;
    }

    public Optional<Integer> getImageSize() {
        return Optional.ofNullable(imageSize);
    }

    public void setImageSize(Integer imageSize) {
        this.imageSize = imageSize;
    }

    public LinkingMode getLinkingMode() {
        return linkingMode;
    }

    public void setLinkingMode(LinkingMode linkingMode) {
        this.linkingMode = linkingMode;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ProjectFileGroup that = (ProjectFileGroup) o;
        return Objects.equals(fileGroup, that.fileGroup) && Objects.equals(urlStructure, that.urlStructure)
                && Objects.equals(mimeType, that.mimeType) && Objects.equals(path, that.path)
                && Objects.equals(project, that.project) && copyFolder == that.copyFolder
                && createFolder == that.createFolder && Objects.equals(derivative, that.derivative)
                && Objects.equals(dpi, that.dpi) && Objects.equals(imageScale, that.imageScale)
                && Objects.equals(imageSize, that.imageSize) && Objects.equals(linkingMode, that.linkingMode);
    }

    /**
     * Returns a hash code value for the object.
     */
    @Override
    public int hashCode() {
        return Objects.hash(fileGroup, urlStructure, mimeType, path, copyFolder, createFolder, derivative, dpi, imageScale,
            imageSize, linkingMode);
    }
}
